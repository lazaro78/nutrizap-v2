import requests
from flask import Flask, request

app = Flask(__name__)

# ===================================================================
# SUAS CREDENCIAIS E LINK DE CHECKOUT - J√Å CONFIGURADOS
# ===================================================================
ULTRAMSG_INSTANCE_ID = "instance138876"
ULTRAMSG_TOKEN = "4hxm72jbbso7qmje"
ULTRAMSG_API_URL = f"https://api.ultramsg.com/{ULTRAMSG_INSTANCE_ID}/messages/chat"
CHECKOUT_LINK = "https://pay.cakto.com.br/tayduyr_496632"

def enviar_resposta(destinatario, texto ):
    """Envia uma mensagem de texto para o usu√°rio via UltraMsg."""
    params = {
        "token": ULTRAMSG_TOKEN,
        "to": destinatario,
        "body": texto,
        "priority": 1
    }
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    try:
        response = requests.post(ULTRAMSG_API_URL, data=params, headers=headers)
        response.raise_for_status()
        print(f"Resposta enviada para {destinatario}: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Erro ao enviar resposta: {e}")

def processa_mensagem(dados_da_mensagem):
    """Fun√ß√£o principal que processa a mensagem e envia a resposta."""
    try:
        remetente = dados_da_mensagem['de']
        mensagem_texto = dados_da_mensagem['corpo']
        msg_lower = mensagem_texto.lower()

        print(f"Processando mensagem: '{mensagem_texto}' de {remetente}")

        # Ignora mensagens do pr√≥prio bot para evitar loops
        if dados_da_mensagem.get('fromMe') is True:
            print("Mensagem do pr√≥prio bot ignorada.")
            return

        # Fluxo de Boas-vindas
        if 'oi' in msg_lower or 'ol√°' in msg_lower:
            enviar_resposta(remetente,
                            "üëã Ol√°! Seja bem-vindo(a) ao *NutriZap*.\n\n"
                            "üí° Fazemos *uma avalia√ß√£o nutricional gr√°tis* da sua refei√ß√£o para voc√™ conhecer nosso servi√ßo.\n"
                            "üì∏ Envie agora a foto do seu prato para come√ßarmos!")
            return

        # Simula√ß√£o de recebimento de foto
        if 'foto' in msg_lower or 'prato' in msg_lower or 'refei√ß√£o' in msg_lower:
            enviar_resposta(remetente, "üîç Analisando sua refei√ß√£o... üçΩÔ∏è")
            enviar_resposta(remetente,
                            "‚úÖ Avalia√ß√£o conclu√≠da!\n\n"
                            "üçÖ Sua refei√ß√£o est√° equilibrada, mas poderia ter mais vegetais e menos carboidratos simples.\n"
                            "üí™ Com nosso *plano Premium*, voc√™ recebe an√°lises ilimitadas, dicas personalizadas e suporte 24h pelo WhatsApp.")
            enviar_resposta(remetente,
                            "üî• Garanta agora seu acesso Premium e continue recebendo an√°lises instant√¢neas!\n"
                            f"üí≥ Clique aqui para assinar: {CHECKOUT_LINK}")
            return

        # Resposta para quem pergunta sobre o plano
        if 'assinar' in msg_lower or 'premium' in msg_lower:
            enviar_resposta(remetente,
                            f"üí≥ Aqui est√° seu link para assinar e liberar acesso imediato:\n{CHECKOUT_LINK}")
            return

        # Resposta padr√£o
        enviar_resposta(remetente,
                        "ü§ñ Desculpe, n√£o entendi.\n"
                        "Envie *oi* para come√ßar ou envie a foto do seu prato. üì∏")

    except (KeyError, TypeError) as e:
        print(f"Erro ao processar os dados da mensagem: {e}")


@app.route('/webhook', methods=['POST'])
def webhook():
    """Recebe os webhooks da UltraMsg."""
    webhook_data = request.get_json()
    print("================ DADOS RECEBIDOS ===============")
    print(webhook_data)
    print("==================================================")

    # Verifica se a chave 'data' (em ingl√™s) existe
    if webhook_data and 'data' in webhook_data:
        processa_mensagem(webhook_data['data'])
    else:
        print("Webhook recebido com formato inv√°lido ou sem a chave 'data'.")
    
    return "OK", 200

@app.route('/', methods=['GET'])
def index():
    return "Bot NutriZap est√° online e funcionando!", 200

if __name__ == '__main__':
    app.run(debug=True)
